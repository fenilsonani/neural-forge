name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Environment variables for consistent testing
  NEURAL_ARCH_LOG_LEVEL: ERROR
  NEURAL_ARCH_RANDOM_SEED: 42
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  # Code quality and linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -e ".[dev]"
        
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/
        
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Type checking with mypy
      run: |
        mypy src/neural_arch --strict --ignore-missing-imports
        
    - name: Check import sorting
      run: |
        pip install isort
        isort --check-only --diff src/ tests/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json || true
        safety check

  # Testing matrix across Python versions and OS
  test:
    name: Test Suite
    needs: [lint, security]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run core tests
      run: |
        pytest tests/ -v --tb=short --strict-markers
        
    - name: Run comprehensive test suite
      run: |
        python run_tests.py
        
    - name: Generate coverage report
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        pytest tests/ --cov=neural_arch --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Performance benchmarking
  benchmark:
    name: Performance Benchmarks
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run performance benchmarks
      run: |
        python tests/test_performance_benchmarks.py
        
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'

  # Build and packaging tests
  build:
    name: Build & Package
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
        
    - name: Check manifest
      run: |
        check-manifest
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import neural_arch; print(f'Neural Architecture {neural_arch.__version__} installed successfully')"
        
    - name: Test CLI
      run: |
        neural-arch --version
        neural-arch info --system

  # Documentation build
  docs:
    name: Documentation
    needs: [lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        
    - name: Build documentation
      run: |
        # This would build Sphinx docs when implemented
        echo "Documentation build placeholder"
        
    - name: Check documentation links
      run: |
        # This would check for broken links in docs
        echo "Documentation link check placeholder"

  # Integration tests
  integration:
    name: Integration Tests
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run training integration test
      run: |
        python simple_model.py
        
    - name: Test CLI commands
      run: |
        neural-arch config create --preset testing --output test_config.yaml
        neural-arch config validate test_config.yaml
        neural-arch benchmark --operations add,mul --sizes 100 --iterations 10

  # Deployment readiness check
  deploy-check:
    name: Deployment Readiness
    if: github.ref == 'refs/heads/main'
    needs: [test, benchmark, build, docs, integration]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deployment readiness check
      run: |
        echo "‚úÖ All CI checks passed!"
        echo "‚úÖ Code quality verified"
        echo "‚úÖ Security scan completed"
        echo "‚úÖ Tests passed across all environments"
        echo "‚úÖ Performance benchmarks within limits"
        echo "‚úÖ Package builds successfully"
        echo "‚úÖ Documentation builds"
        echo "‚úÖ Integration tests passed"
        echo "üöÄ Ready for deployment!"
        
    - name: Create deployment artifact
      run: |
        echo "neural-arch-${{ github.sha }}" > deployment-ready.txt
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-ready
        path: deployment-ready.txt

# Notification on failure
  notify:
    name: Notify on Failure
    if: failure()
    needs: [lint, security, test, benchmark, build, docs, integration]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå CI Pipeline failed!"
        echo "Please check the failed jobs and fix issues before merging."